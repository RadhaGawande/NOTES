Spring & Spring Boot Framework
-------------------Points Mark as a Sign(*)-------------------               
                      Introduction
Framework--->
semi developed code which can be customized to build 	 
our application.Here we get some ready made code to develop ,we do not have to start coding from scratch we acheive RAD[Rapid application development] using framework.

Why Spring is Popular?
1)Enables Testable Code
2)There no Plumbing Code
3)Flexible Architecture
4)Staying Current[stays up with the trends].

Why To Learn Spring?
Spring is the most popular application development framework for enterprise java.

Spring---->Spring Framework is a Java platform that provides
comprehensive infrastructure support for developing enterprise
applications. Spring handles the infrastructure so you can focus on your application.Spring is the DI framework.

Spring Boot---->Spring Boot is a module of the Spring Framework. It is used to create stand-alone, production-grade Spring Based Applications with minimum efforts. It is developed on top of the core Spring Framework.
______________________________________________________________

Spring simplifies java development by employing these ideas:-

1)POJO[Plain old Java Object] based development---->
A class not dependent on any API,server or architecture is called as a POJO.

2)DI-Dependency Injection----->The process of supplying dependencies to a software component automatically is called as DI.

3)Declarative Programming---->
In Declarative Programming,programmer provides metadata thro xml or annotation & framework executes the appln accordingly.

4)AOP-Aspect Oriented Programming--->
There is some logic which is common for all BL/functions
eg:-transaction,exception,socket,logging,security,encrytion,
compression.
seperation of Business logic from infrastructural activities is known as AOP.

5)Templates---->Using Templates,repetitive code is autogenerated hence source code is reduced
In spring we have JdbcTemplate ...
we just have to pass sql query to it & it will autogenerate jdbc code for us.

-----Few Terminology Frequently Associated with Spring-----
A]Beans-->Beans are the different objects that are manage by the spring framework.

B]Autowiring-->The process where spring identifies the dependencies,identifies the matches for the dependencies & populates them that process is called Autowiring.

C]Dependency Injection-->DI helps in gluing these classes together & same time keeping them independent.

D]Inversion of Control-->Taking the control from the class that needs the dependencies and giving the control to the framework to this spring framework this is called Inversion Of Control.

E]IOC[Inversion Of Control]Container-->it is a generic Terminolgy to represents anything that is implementing inversion of control. eg of IOC container is Appln Context.

F]Application Context-->appln context is the one where all the beans are created 7 managed. it is the most imp part of spring framework[core logic happens].

* SpringInitializer Project[Don't Use SNAPSHOT versions].New Version select.[https://start.spring.io]
* Give Artifact Id(Project Name) & Group Id(Package Name).
* Add Dependencies Which are needed.
* After Downloading Spring Project.
* Import project in Eclipse goto File->Import Proj ->select Existing Maven Project Next->browse path of that project ->select pom.xml ->finish.
 
Tight Coupling->it means classes and objects are dependent on one another.it is not good bcoz it reduces the flexibilty & reusability of code.

Loose Coupling->it means reducing the dependencies of a class that uses the different class directly.

Bean factory->The beanFactory is the actual container which instantiates ,configures and manages a number of beans.

Spring Annotations->
@Autowired->In spring annotation,whenever there is containment then use.
@Service
@Configuration
@Component
@Repository
@ Primary

Spring Modules---->
IOC Container
DAO[Data Access Object]
Spring MVC/Web
Spring AOP


DAO-->
DAO is a software design pattern used to seperate data access code from application logic.

Spring MVC-->Spring MVC is a module in spring used to develop web-based application using spring framework.

MVC is a software design pattern which splits application logic into--->
3 parts
1)Model - holds the data 
2)View(acts as a UI) - take input/show output			
3)Controller - perform Business Logic


various Components in srping mvc are-->
1)Dispatcher Servlet  -front controller which controls the flow of appln. 
2)Handler Mapping -identify specific controller
3)Controller - Business Logic,PUT DATA IN MODEL,send view name
4)View Resolver -attach prefix[/] & suffix[.jsp].
5)Model-holds data
6)View  - generate response

Steps to create web appln project.
-------
open eclipse--->select Java EE perspective--->configure tomcat server & start it

1)create a new Dynamic web project [web module version 3.0]
2)paste jar files in the lib folder
3)create packages in src 
4)create pojo class 5)create jsp pages

Note--->
To run spring MVC application
Rtclick Project---->Run on server

Lifecycle of a Bean -->
two methods->
1] @PostConstruct annotatn.
->The @PostConstruct annotation is used on a method that needs to be executed after dependency injection is done to perform any initialization.
eg.
@PostConstruct
public void init(){
//initialiaztion work
}

2] @PreDestroy annotatn.
->The @PreDestroy annotation is used on methods as a callback notification to signal that the instance is in the process of being removed by the container.
eg.
@PreDestroy
public void cleanUp() or destroy(){
//initialiaztion work
}


_____________________________________________________________
Spring Boot

spring boot is one of the most popular framework to develop microservices today.spring makes very easy to develop appln quickly.

Features are--->
Startup projects,Autoconfiguration,Actuator.
* Quick Starter Projects with auto Cinfiguration
-Web
-JPA
* Quickly Create Spring Applications.

Spring Boot Architecture-->
There are four layers in Spring Boot 

I]Presentation Layer: The presentation layer handles the HTTP requests, translates the JSON parameter to object, and authenticates the request and transfer it to the business layer. In short, it consists of views i.e., frontend part.

II]Business Layer: The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. It also performs authorization and validation.

III]Persistence Layer: The persistence layer contains all the storage logic and translates business objects from and to database rows.

IV]Database Layer: In the database layer, CRUD (create, retrieve, update, delete) operations are performed.

Create simple Spring Boot Project-->

* SpringInitializer Project[Don't Use SNAPSHOT versions].New Version select.[https://start.spring.io]
* Give Artifact Id(Project Name) & Group Id(Package Name).
* Add Dependencies Which are needed.
* After Downloading Spring Project.
* Import project in Eclipse goto File->Import Proj ->select Existing Maven Project Next->browse path of that project ->select pom.xml ->finish-->Run The demo of class appln

Spring Boot Auto Configuration-->
Automatically configure ur spring application based on the jar dependencies that u have added(autoconfiguration jar).
a)Framework available on the class path
b)Existing configuration for the appln.
eg. DataSourceAutoConfiguration
more about autocongn---------->
turn on debug mode--->in appln.context
write ->logging.level.org.springframework=debug

Strater Web & Starter JPA->
add the dependencies in pom.xml of starter web & starter jpa
<dependency>
<grouId>org.springframework.boot</grouId>
<artifactId>spring-boot-starter-web</artifcatId>
</dependency>

<dependency>
<grouId>org.springframework.boot</grouId>
<artifactId>spring-boot-starter-data-jpa</artifcatId>
</dependency>

*Spring Boot Actuator->In actuator u can read alot of metadata about the appln.
add dependency in pom.xml
<dependency>
<grouId>org.springframework.boot</grouId>
<artifactId>spring-boot-starter-actuator</artifcatId>
</dependency>
 

Spring AOP[Aspects Oriented Programming]-->create spring boot project & import it.
add the dependency in pom.xml
<dependency>
<grouId>org.springframework.boot</grouId>
<artifactId>spring-boot-starter-aop</artifcatId>
</dependency>

* AOP is Best appoarch for implementing cross cutting concerns.
* create business class & Dao Class.

Spring Aspect AOP implementation provides many annotations:
1)@Aspect declares the class as aspect.(Tracking Time)
2)@Pointcut declares the pointcut expression.

The annotations used to create advices are below:-->
1)@Before declares the before advice. It is applied before calling the actual method.
2)@After declares the after advice. It is applied after calling the actual method and before returning result.
3)@AfterReturning declares the after returning advice. It is applied after calling the actual method and before returning result. But you can get the result value in the advice.
4)@Around declares the around advice. It is applied before and after calling the actual method.
5)@AfterThrowing declares the throws advice. It is applied if actual method throws exception.

*****The @Pointcut annotation is used to define the pointcut*****
 We can refer the pointcut expression by name also. Let's see the simple example of pointcut expression.
1)@Pointcut("execution(* Operation.*(..))")  
2)private void doSomething() {}  
The name of the pointcut expression is doSomething(). It will be applied on all the methods of Operation class regardless of return type.

eg.->
1]@Pointcut("execution(public * *(..))")  
It will be applied on all the public methods.

2]@Pointcut("execution(public Operation.*(..))")  
It will be applied on all the public methods of Operation class.

3]@Pointcut("execution(* Operation.*(..))")  
It will be applied on all the methods of Operation class.

4]@Pointcut("execution(public Employee.set*(..))")  
It will be applied on all the public setter methods of Employee class.

5]@Pointcut("execution(int Operation.*(..))")  
It will be applied on all the methods of Operation class that returns int value.

* In aop we can create our own custome annotn.


Spring JDBC & JPA-->
Spring JDBC->setup Project
* SpringInitializer Project[Don't Use SNAPSHOT versions].New Version select.[https://start.spring.io]
* Give Artifact Id(Project Name) & Group Id(Package Name).
* Add Dependencies Which are needed.(web,jdbc,jpa,h2)
* After Downloading Spring Project.(unzip it)
* Import project in Eclipse goto File->Import Proj ->select Existing Maven Project Next->browse path of that project ->select pom.xml ->finish-->Run The demo of class appln
OR(In Spring for JDBC)
->create a Java Project & add jar files[spring basic jar + spring jdbc jar files+ database jar file]
*how to change port no for h2 console-->server.port=8085

Advantage of Spring JdbcTemplate->
Spring JdbcTemplate eliminates all the above mentioned problems of JDBC API. It provides you methods to write the queries directly,so it saves a lot of work and time.

Spring Jdbc Approaches-->
Spring framework provides following approaches for JDBC database access->
JdbcTemplate
NamedParameterJdbcTemplate
SimpleJdbcTemplate
SimpleJdbcInsert and SimpleJdbcCall

DAO IMpl<-----JdbcTemplate<----------DataSource
JDBCTemplate is a template class provided by spring framework
which auto generates jdbc code for us we need to only provide query & some data to it.

* Have to create Table in sql file & populate the data in their.

CRUD Operation-->
create, retrieve, update, delete

*CommandLineRunner->it is interfaces.
first main will executes before main method exits run method also executes i.e called CommandLineRunner.

PUT- it Updates a user.
POST- it Creates a user.
GET- it Retrieves the details of a user.
DELETE- it Deletes a user.
______________________________________________________________



Hibernate  

*Hibernate is a Database Framework->
It saves an object into DB.
used for Object Persistence in the database.

*Key Components

1)Entity : A JPA entity class is a POJO , i.e. an ordinary Java class that is annotated as having the ability to represent objects in the database

2)EntityManager : Manages the persistence operations on Entities.

3)EntityTransaction : One-to-one relationship with EntityManager. For each EntityManager, operations are maintained by EntityTransaction class.

4)EntityManagerFactory : Factory class of EntityManager.

5)Transaction (org.hibernate.Transaction) TODO - A single-threaded, short-lived object used by the application to demarcate individual physical transaction boundaries. It acts as an abstraction API to isolate the application from the underling transaction system in use (JDBC, JTA, CORBA, etc).

6)Domain Model : The POJO should have a no-argument constructor. Both Hibernate and JPA require this.

JPA-Java Persistence API-->
add dependency in pom.xml
anntns-> defining entity with hibernate
@Entity
@Column
@Id(Primary Key)
@GeneratedValue-auto generate value.

Imp Annotations in JPA Hibernate->

@Entity : Indicates the class as an entity or a table.

@Table : Indicates table name.

@Id : Identifies the column as a primary key of the Entity.

@GeneratedValue : Indicates that the column will be auto generated.

@Transient : Column will not be persisted.

@Column : Used to specify properties on a Entity Column

@JoinColumn : Used to specify the column used in the Join.

@ManyToMany Indicates a many-to-many relationship between the join Tables.

@ManyToOne Indicates a many-to-one relationship between the join Tables.

@OneToMany Indicates a one-to-many relationship between the join Tables.

@OneToOne Indicates a one-to-one relationship between the join Tables.

@NamedQueries Indicates list of named queries.

@NamedQuery Indicates a Query using static name.

Schema creation->
Schema update triggered by spring boot autconfiguration & it's one of the features in hibernate.

* spring.jpa.show-sql=true(appln.properties).

Configure application.properties->
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mysql://localhost:3306/person_example
spring.datasource.username=personuser
spring.datasource.password=YOUR_PASSWORD

#none, validate, update, create, create-drop
spring.jpa.hibernate.ddl-auto=create

*ORM->Object Relational Mapping-->refers to automated object persistence of Java object into relational db based on metadata that describes the mapping between Java object & relational table.

*Hibernate is a ORM framework which maps java object to relational db based on the metadata we provide using xml/annotation.

*Note-> http://www.hibernate.org(for jar file downloading).

*Basic Annotations
@Entity--->marks a class as a Entity/POJO class
@Table-->specific table name
@Id--->specific PK column
@Column--->specify non PK columns

Hibernate Architecture-->
1)Configuration
2)SessionFactory
3)Session 
4)Transaction
5)save/load/update/delete

Query Methodology-->

1)JPQL[java persistence query language]- we write quries using java entities.
eg. Select c from Course c

2)Native Queries- Sql Quries Directly.

3)Criteria Queries

*Component Mapping-->
eg.->
@Entity @Table
class Employee{
@Id,@Column
empid
	
@Column
empname,empsal,jdate;
	
@Embedded
Address resAddress;
}
@Embeddable
class Address{
	@Column
	street,city,country,pincode;
}
//Here do not create  a seperate table for class Address

->Here we use 2 annotations
@Embedded specifies not to create a new table for that property

@Embeddable applied to some class which wud be embedded in other class

*Persistent Object-->A persistent object is one which is associated with the current Session and has its state values synchronized with the database.

*nullable means name can not have null value.

*POJO-Plain Old Java Object

*[Hibernate Annotn]->
@UpdateTimeStamp->last updated time
@CreationTimeStamp->create new time

*Hibernate Inheritance Mapping-->Inheritance is the property by the virtue of which one object acquires features of other.
To implement inheritance mapping are 3 ways->

1)Table per Hierarchy-
Annotns Used-@Inheritance,@DiscriminatorColumn,@DiscriminatorValue.

2)Table per concrete class-Annotations used->
@MappedSuperClass ,@AttributeOverrides.

3)Table per subclass-Annotations used->
@Inheritance,@PrimaryKeyJoinColumn


*Transaction-->
allows the application to define units of work-txn
beginTransaction,commit,rollback.

Hibernate Architecture-->
1)Configuration-holds metadata
2)SessionFactory-to provide session objects,one sessionfactory per db.
3)Session -Retrieve ,Update
4)Transaction-beginTransaction,commit,rollback


* Persistence Context->it is a place where all the Entities which u r operating upon are being stored.(all changes kept)


---------------------------------- Made By Bharti Gawande -----------------------------------------------












